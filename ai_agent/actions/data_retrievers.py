import json


class DataRetrievers:
    """Classe pour g√©rer la r√©cup√©ration de donn√©es du syst√®me √©ducatif"""
    
    def get_etudiants(self, data: dict) -> str:
        """R√©cup√®re la liste des √©tudiants"""
        try:
            with open("data/etudiants.json", 'r') as f:
                etudiants = json.load(f)
            
            if not etudiants:
                return "üìã Aucun √©tudiant enregistr√©"
            
            result = "üìã **Liste des √©tudiants :**\n\n"
            for etudiant in etudiants:
                result += f"‚Ä¢ **{etudiant.get('nom', 'N/A')}** (ID: {etudiant.get('id', 'N/A')})\n"
                result += f"  üìß {etudiant.get('email', 'N/A')}\n"
                result += f"  üéì Num√©ro: {etudiant.get('numero_etudiant', 'N/A')}\n\n"
            
            return result
            
        except Exception as e:
            return f"‚ùå Erreur: {str(e)}"
    
    def get_professeurs(self, data: dict) -> str:
        """R√©cup√®re la liste des professeurs"""
        try:
            with open("data/professeurs.json", 'r') as f:
                professeurs = json.load(f)
            
            if not professeurs:
                return "üìã Aucun professeur enregistr√©"
            
            result = "üìã **Liste des professeurs :**\n\n"
            for prof in professeurs:
                result += f"‚Ä¢ **{prof.get('nom', 'N/A')}** (ID: {prof.get('id', 'N/A')})\n"
                result += f"  üìß {prof.get('email', 'N/A')}\n"
                result += f"  üéØ Sp√©cialit√©: {prof.get('specialite', 'N/A')}\n\n"
            
            return result
            
        except Exception as e:
            return f"‚ùå Erreur: {str(e)}"
    
    def get_cours(self, data: dict) -> str:
        """R√©cup√®re la liste des cours"""
        try:
            with open("data/cours.json", 'r') as f:
                cours = json.load(f)
            
            if not cours:
                return "üìã Aucun cours enregistr√©"
            
            result = "üìã **Liste des cours :**\n\n"
            for c in cours:
                result += f"‚Ä¢ **{c.get('nom', 'N/A')}** (ID: {c.get('id', 'N/A')})\n"
                result += f"  üîñ Code: {c.get('code', 'N/A')}\n"
                result += f"  ‚≠ê Cr√©dits: {c.get('credits', 'N/A')}\n"
                result += f"  üë®‚Äçüè´ Professeur ID: {c.get('professeur_id', 'N/A')}\n\n"
            
            return result
            
        except Exception as e:
            return f"‚ùå Erreur: {str(e)}"
    
    def get_notes(self, data: dict) -> str:
        """R√©cup√®re la liste des notes"""
        try:
            with open("data/notes.json", 'r') as f:
                notes = json.load(f)
            
            if not notes:
                return "üìã Aucune note enregistr√©e"
            
            result = "üìã **Liste des notes :**\n\n"
            for note in notes:
                result += f"‚Ä¢ **Note: {note.get('valeur', 'N/A')}/20** (ID: {note.get('id', 'N/A')})\n"
                result += f"  üéì √âtudiant ID: {note.get('etudiant_id', 'N/A')}\n"
                result += f"  üìù √âvaluation ID: {note.get('evaluation_id', 'N/A')}\n"
                if note.get('commentaire'):
                    result += f"  üí¨ {note.get('commentaire')}\n"
                result += "\n"
            
            return result
            
        except Exception as e:
            return f"‚ùå Erreur: {str(e)}"
    
    def get_stats(self, data: dict) -> str:
        """R√©cup√®re les statistiques du syst√®me"""
        try:
            # R√©cup√©ration des donn√©es pour calculer les stats
            current_data = self._get_current_data()
            stats = current_data.get('stats', {})
            
            result = "üìä **Statistiques du syst√®me :**\n\n"
            result += f"üë®‚Äçüè´ Professeurs: {stats.get('nb_professeurs', 0)}\n"
            result += f"üéì √âtudiants: {stats.get('nb_etudiants', 0)}\n"
            result += f"üìö Cours: {stats.get('nb_cours', 0)}\n"
            result += f"üìù √âvaluations: {stats.get('nb_evaluations', 0)}\n"
            result += f"üìã Notes: {stats.get('nb_notes', 0)}\n"
            result += f"‚≠ê Reviews: {stats.get('nb_reviews', 0)}\n"
            
            return result
            
        except Exception as e:
            return f"‚ùå Erreur: {str(e)}"
    
    def get_reviews(self, data: dict) -> str:
        """R√©cup√®re la liste des reviews"""
        try:
            with open("data/reviews.json", 'r') as f:
                reviews = json.load(f)
            
            if not reviews:
                return "üìã Aucune review enregistr√©e"
            
            result = "üìã **Liste des reviews :**\n\n"
            for review in reviews:
                result += f"‚Ä¢ **Note: {review.get('note', 'N/A')}/5** (ID: {review.get('id', 'N/A')})\n"
                result += f"  üéì √âtudiant ID: {review.get('etudiant_id', 'N/A')}\n"
                result += f"  üìö Cours ID: {review.get('cours_id', 'N/A')}\n"
                if review.get('commentaire'):
                    result += f"  üí¨ {review.get('commentaire')}\n"
                result += "\n"
            
            return result
            
        except Exception as e:
            return f"‚ùå Erreur: {str(e)}"
    
    def get_evaluations(self, data: dict) -> str:
        """R√©cup√®re la liste des √©valuations"""
        try:
            with open("data/evaluations.json", 'r') as f:
                evaluations = json.load(f)
            
            if not evaluations:
                return "üìã Aucune √©valuation enregistr√©e"
            
            result = "üìã **Liste des √©valuations :**\n\n"
            for evaluation in evaluations:
                result += f"‚Ä¢ **{evaluation.get('nom', 'N/A')}** (ID: {evaluation.get('id', 'N/A')})\n"
                result += f"  üìö Cours ID: {evaluation.get('cours_id', 'N/A')}\n"
                result += f"  üìù Type: {evaluation.get('type', 'N/A')}\n"
                result += f"  ‚öñÔ∏è Coefficient: {evaluation.get('coefficient', 'N/A')}\n\n"
            
            return result
            
        except Exception as e:
            return f"‚ùå Erreur: {str(e)}"
    
    def _get_current_data(self) -> dict:
        """R√©cup√®re les donn√©es actuelles du syst√®me pour les stats"""
        try:
            with open("data/professeurs.json", 'r') as f:
                professeurs = json.load(f)
            with open("data/etudiants.json", 'r') as f:  
                etudiants = json.load(f)
            with open("data/cours.json", 'r') as f:
                cours = json.load(f)
            with open("data/evaluations.json", 'r') as f:
                evaluations = json.load(f)
            with open("data/notes.json", 'r') as f:
                notes = json.load(f)
            with open("data/reviews.json", 'r') as f:
                reviews = json.load(f)
                
            return {
                "professeurs": professeurs,
                "etudiants": etudiants, 
                "cours": cours,
                "evaluations": evaluations,
                "notes": notes,
                "reviews": reviews,
                "stats": {
                    "nb_professeurs": len(professeurs),
                    "nb_etudiants": len(etudiants),
                    "nb_cours": len(cours),
                    "nb_evaluations": len(evaluations),
                    "nb_notes": len(notes),
                    "nb_reviews": len(reviews)
                }
            }
        except Exception:
            return {"erreur": "Impossible de charger les donn√©es"}